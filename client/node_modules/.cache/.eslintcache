[{"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/index.js":"1","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/App.jsx":"2","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Exercises.jsx":"3","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Timer.jsx":"4","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Footer.jsx":"5","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Header.jsx":"6","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Popup.jsx":"7","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/data/exercises.jsx":"8","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/Login.jsx":"9","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/SignUp.jsx":"10","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/ForgotPw.jsx":"11","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/utils/config.js":"12"},{"size":332,"mtime":1686214742120,"results":"13","hashOfConfig":"14"},{"size":907,"mtime":1694434301041,"results":"15","hashOfConfig":"14"},{"size":2769,"mtime":1693899434521,"results":"16","hashOfConfig":"14"},{"size":6206,"mtime":1693899897452,"results":"17","hashOfConfig":"14"},{"size":306,"mtime":1686663767793,"results":"18","hashOfConfig":"14"},{"size":3294,"mtime":1693902466313,"results":"19","hashOfConfig":"14"},{"size":1018,"mtime":1686771700972,"results":"20","hashOfConfig":"14"},{"size":1065,"mtime":1693834653201,"results":"21","hashOfConfig":"14"},{"size":3298,"mtime":1694436308400,"results":"22","hashOfConfig":"14"},{"size":3036,"mtime":1694435468924,"results":"23","hashOfConfig":"14"},{"size":1323,"mtime":1694422663870,"results":"24","hashOfConfig":"14"},{"size":67,"mtime":1694424335408,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1imsk9w",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/index.js",[],[],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/App.jsx",["67"],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Exercises.jsx",["68","69","70","71","72"],[],"import React, { useState, useEffect } from \"react\";\nimport data from \"../data/exercises\";\n\nconst Exercises = ({ onClose }) => {\n    const [showPopup, setShowPopup] = useState(false);\n    const [exercises, setExercises] = useState(data);\n    const [newExercise, setNewExercise] = useState({ name: \"\", desc: \"\" });\n\n    const handleClose = () => {\n        setShowPopup(false);\n        onClose();\n    };\n\n    const addExercise = () => {\n        // Check if both name and desc are provided\n        if (newExercise.name && newExercise.desc) {\n            // Create a copy of the newExercise object\n            const exerciseToAdd = { ...newExercise };\n\n            // Add the exercise to the exercises array\n            setExercises([exerciseToAdd, ...exercises]);\n\n            // Clear the input fields after adding the exercise\n            setNewExercise({ name: \"\", desc: \"\" });\n        }\n    };\n\n    const removeExercise = (indexToRemove) => {\n        const updatedExercises = exercises.filter((_, index) => index !== indexToRemove);\n        setExercises(updatedExercises);\n    };\n\n    return (\n        <div className=\"exercise-container\">\n            <h1 className=\"text-center mt-3 mb-4\">Exercises</h1>\n\n            <div className=\"add-exercise p-3\">\n                <h6 className=\"py-2\">Add exercise</h6>\n                <input\n                    className=\"input-field\"\n                    type=\"text\"\n                    value={newExercise.name}\n                    onChange={(e) => setNewExercise({ ...newExercise, name: e.target.value })}\n                    placeholder=\"Name\"\n                />\n                <input\n                    className=\"input-field input-desc\"\n                    type=\"textarea\"\n                    value={newExercise.desc}\n                    onChange={(e) => setNewExercise({ ...newExercise, desc: e.target.value })}\n                    placeholder=\"Description\"\n                />\n                <div className=\"mt-3 text-center py-3 w-100\">\n                    <a className=\"btn-add d-flex w-100 justify-content-center\" onClick={addExercise}>\n                        Add\n                    </a>\n                </div>\n            </div>\n            {exercises.map((exercise, index) => (\n                <div className=\"exercise-card my-3\" key={index}>\n                    <div>\n                        <h5>{exercise.name}</h5>\n                    </div>\n                    <div>{exercise.desc}</div>\n                    <div className=\"text-end mt-3\">\n                        <a className=\"btn-remove\" onClick={() => removeExercise(index)}>\n                            Remove\n                        </a>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Exercises;\n","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Timer.jsx",["73","74","75"],[],"import React, { useState, useEffect } from \"react\";\nimport \"../scss/components/timer.scss\";\nimport Popup from \"./Popup\";\n\nconst Timer = () => {\n    const [time, setTime] = useState(10); // 5 minutes in seconds\n    const [selectedTime, setSelectedTime] = useState({ hours: \"\", minutes: \"\" });\n    const [isActive, setIsActive] = useState(false);\n    const [showPopup, setShowPopup] = useState(false);\n\n    useEffect(() => {\n        let interval = null;\n\n        if (isActive) {\n            interval = setInterval(() => {\n                setTime((prevTime) => {\n                    if (prevTime === 0) {\n                        clearInterval(interval);\n                        setShowPopup(true); // Show the popup when the timer reaches 0\n                        return 0;\n                    } else {\n                        return prevTime - 1;\n                    }\n                });\n            }, 1000);\n        } else {\n            clearInterval(interval);\n        }\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isActive, time]); // Include 'time' as a dependency in the useEffect dependency array\n\n    useEffect(() => {\n        // Update the timer whenever the selectedTime changes\n        const totalTimeInSeconds = selectedTime.hours * 3600 + selectedTime.minutes * 60;\n        setTime(totalTimeInSeconds);\n    }, [selectedTime]);\n\n    const startTimer = () => {\n        setIsActive(true);\n    };\n\n    const stopTimer = () => {\n        setIsActive(false);\n    };\n\n    const resetTimer = () => {\n        setIsActive(false);\n        const totalTimeInSeconds = selectedTime.hours * 3600 + selectedTime.minutes * 60;\n        setTime(totalTimeInSeconds);\n    };\n\n    const handleTimeChange = (event) => {\n        const { name, value } = event.target;\n\n        setSelectedTime((prevTime) => ({\n            ...prevTime,\n            [name]: parseInt(value),\n        }));\n    };\n\n    const formatTime = (time) => {\n        const hours = Math.floor(time / 3600);\n        const minutes = Math.floor((time % 3600) / 60);\n        const seconds = time % 60;\n\n        return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds\n            .toString()\n            .padStart(2, \"0\")}`;\n    };\n\n    const handlePopupClose = () => {\n        setShowPopup(false);\n    };\n\n    const hourOptions = Array.from({ length: 24 }, (_, i) => i); // Generate options for hours (0-23)\n    const minuteOptions = Array.from({ length: 12 }, (_, i) => i * 5); // Generate options for minutes (0, 5, 10, 15, ..., 55)\n\n    return (\n        <div className=\"timer\">\n            <div className=\"timer-container container d-flex align-items-center justify-content-center\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-12 d-flex justify-content-center\">\n                        <div className=\"circle\">\n                            <svg className=\"circle-svg\">\n                                <circle className=\"circle-background\" cx=\"50%\" cy=\"50%\" r=\"45%\" />\n                                <circle\n                                    className=\"circle-progress\"\n                                    cx=\"50%\"\n                                    cy=\"50%\"\n                                    r=\"45%\"\n                                    style={{\n                                        strokeDasharray: `${\n                                            (time / (selectedTime.hours * 3600 + selectedTime.minutes * 60)) * 283\n                                        }% 283%`,\n                                    }}\n                                />\n                            </svg>\n                            <div className=\"time-wrapper\">\n                                <span className=\"time text-white\">{formatTime(time)}</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-12 mt-4 d-flex justify-content-center\">\n                        {!isActive ? <a onClick={startTimer}>Start</a> : <a onClick={stopTimer}>Stop</a>}\n                        <a onClick={resetTimer}>Reset</a>\n                    </div>\n                    <div className=\"col-12 mt-2 d-flex justify-content-center mt-4\">\n                        <div className=\"mx-1\">\n                            <select\n                                className=\"form-select\"\n                                name=\"hours\"\n                                value={selectedTime.hours}\n                                onChange={handleTimeChange}\n                            >\n                                <option value=\"\" disabled selected>\n                                    Hours\n                                </option>\n                                {hourOptions.map((hour) => (\n                                    <option key={hour} value={hour}>\n                                        {hour} h\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"mx-1\">\n                            <select\n                                className=\"form-select\"\n                                name=\"minutes\" // Update the name to \"minutes\"\n                                value={selectedTime.minutes} // Use selectedTime.minutes instead of selectedTime.hours\n                                onChange={handleTimeChange}\n                            >\n                                <option value=\"\" disabled selected>\n                                    Minutes\n                                </option>\n                                {minuteOptions.map((minute) => (\n                                    <option key={minute} value={minute}>\n                                        {minute} min\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                {showPopup && isActive && <Popup onClose={handlePopupClose} />}\n            </div>\n        </div>\n    );\n};\n\nexport default Timer;\n","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Footer.jsx",[],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Header.jsx",["76","77"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\nimport logo from \"../img/logo.png\";\n\nconst Header = () => {\n    const [showMenu, setShowMenu] = useState(false);\n\n    const toggleMenu = () => {\n        setShowMenu(!showMenu);\n    };\n\n    const closeMenu = () => {\n        setShowMenu(false);\n    };\n\n    return (\n        <>\n            <div className=\"header w-100 mt-4\">\n                <Navbar bg=\"\" expand=\"\">\n                    <Container className=\"justify-content-center\">\n                        <div className=\"row\">\n                            <div className=\"col-12 d-flex justify-content-center pb-4\">\n                                <Link to=\"/timer\">\n                                    <img className=\"logo\" src={logo} alt=\"Logo\" />\n                                </Link>\n                            </div>\n                            <div className=\"col-12 d-flex justify-content-center\">\n                                <Navbar.Toggle\n                                    aria-controls=\"basic-navbar-nav\"\n                                    onClick={toggleMenu}\n                                    className={showMenu ? \"navbar-toggler white\" : \"navbar-toggler\"}\n                                >\n                                    <div className=\"menu-container\">\n                                        <a className=\"text-white menu-text\">Menu</a>\n                                    </div>\n                                </Navbar.Toggle>\n                            </div>\n                        </div>\n                        <Offcanvas show={showMenu} onHide={closeMenu} placement=\"top\">\n                            <Offcanvas.Header className=\"mx-auto mt-3\">\n                                <Offcanvas.Title></Offcanvas.Title>\n                                <div className=\"close-container\">\n                                    <a className=\"close\" onClick={closeMenu}>\n                                        Close\n                                    </a>\n                                </div>\n                            </Offcanvas.Header>\n                            <Offcanvas.Body className=\"d-flex flex-column align-items-center justify-content-start\">\n                                <Nav className=\"flex-column text-center\">\n                                    <Link className=\"nav-link\" to=\"/timer\" onClick={closeMenu}>\n                                        Timer\n                                    </Link>\n                                    <Link className=\"nav-link\" to=\"/exercises\" onClick={closeMenu}>\n                                        Exercises\n                                    </Link>\n                                    <Link className=\"nav-link\" to=\"/login\" onClick={closeMenu}>\n                                        Log in\n                                    </Link>\n                                </Nav>\n                            </Offcanvas.Body>\n                        </Offcanvas>\n                    </Container>\n                </Navbar>\n            </div>\n        </>\n    );\n};\n\nexport default Header;\n","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/Popup.jsx",["78","79"],[],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport data from \"../data/exercises\";\n\nconst Popup = ({ onClose }) => {\n    const [showPopup, setShowPopup] = useState(true);\n\n    const exercises = data;\n    const randomExerciseIndex = Math.floor(Math.random() * exercises.length);\n    const randomExercise = exercises[randomExerciseIndex];\n\n    const handleClose = () => {\n        setShowPopup(false);\n        onClose();\n    };\n\n    return (\n        <Modal show={showPopup} centered>\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <Modal.Title>{randomExercise.name}</Modal.Title>\n                    <span className=\"close red-close-button\" onClick={handleClose}>\n                        <span>&times;</span>\n                    </span>\n                </div>\n                <div className=\"modal-body\">{randomExercise.desc}</div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default Popup;\n","/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/data/exercises.jsx",[],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/Login.jsx",[],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/SignUp.jsx",[],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/components/login/ForgotPw.jsx",["80"],[],"/Users/katjakontio/Desktop/git/DeskStretch/DeskStretch/client/src/utils/config.js",[],[],{"ruleId":"81","severity":1,"message":"82","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"86","line":5,"column":12,"nodeType":"83","messageId":"84","endLine":5,"endColumn":21},{"ruleId":"81","severity":1,"message":"87","line":9,"column":11,"nodeType":"83","messageId":"84","endLine":9,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":54,"column":21,"nodeType":"90","endLine":54,"endColumn":102},{"ruleId":"88","severity":1,"message":"89","line":66,"column":25,"nodeType":"90","endLine":66,"endColumn":89},{"ruleId":"88","severity":1,"message":"89","line":108,"column":38,"nodeType":"90","endLine":108,"endColumn":62},{"ruleId":"88","severity":1,"message":"89","line":108,"column":74,"nodeType":"90","endLine":108,"endColumn":97},{"ruleId":"88","severity":1,"message":"89","line":109,"column":25,"nodeType":"90","endLine":109,"endColumn":49},{"ruleId":"88","severity":1,"message":"89","line":38,"column":41,"nodeType":"90","endLine":38,"endColumn":77},{"ruleId":"88","severity":1,"message":"89","line":47,"column":37,"nodeType":"90","endLine":47,"endColumn":78},{"ruleId":"81","severity":1,"message":"85","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"91","line":2,"column":17,"nodeType":"83","messageId":"84","endLine":2,"endColumn":23},{"ruleId":"88","severity":1,"message":"89","line":20,"column":33,"nodeType":"90","endLine":20,"endColumn":94},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'showPopup' is assigned a value but never used.","'handleClose' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Button' is defined but never used."]